// File: classic_fsm.v
// Generated by MyHDL 0.11
// Date: Tue Nov 24 17:58:54 2020


`timescale 1ns/10ps

module classic_fsm (
    clk_i,
    inputs_i,
    outputs_o
);


input clk_i;
input [1:0] inputs_i;
output [3:0] outputs_o;
reg [3:0] outputs_o;

reg [1:0] reset_cnt;
reg [1:0] fsm_state;
wire [1:0] input_chgs;
wire [1:0] dbnc_inputs;
reg [1:0] prev_inputs;
reg chunk_insts_3_button_o;
reg chunk_insts_3_prev_button;
reg [16:0] chunk_insts_3_debounce_cnt;
reg chunk_insts_4_button_o;
reg chunk_insts_4_prev_button;
reg [16:0] chunk_insts_4_debounce_cnt;
wire [1:0] chunk_insts_4_chunk_insts_0_a;

assign chunk_insts_4_chunk_insts_0_a[1] = chunk_insts_3_button_o;
assign chunk_insts_4_chunk_insts_0_a[0] = chunk_insts_4_button_o;



assign dbnc_inputs = chunk_insts_4_chunk_insts_0_a;



assign input_chgs = (dbnc_inputs & (~prev_inputs));


always @(posedge clk_i) begin: CLASSIC_FSM_LOC_INSTS_CHUNK_INSTS_2
    if (($signed({1'b0, reset_cnt}) < (4 - 1))) begin
        fsm_state <= 2'b00;
        reset_cnt <= (reset_cnt + 1);
    end
    else if ((fsm_state == 2'b00)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b01;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b11;
        end
    end
    else if ((fsm_state == 2'b01)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b10;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b00;
        end
    end
    else if ((fsm_state == 2'b10)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b11;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b01;
        end
    end
    else if ((fsm_state == 2'b11)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b00;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b10;
        end
    end
    else begin
        fsm_state <= 2'b00;
    end
    prev_inputs <= dbnc_inputs;
end


always @(posedge clk_i) begin: CLASSIC_FSM_LOC_INSTS_CHUNK_INSTS_3_LOC_INSTS_CHUNK_INSTS_0
    if ((chunk_insts_3_debounce_cnt == 0)) begin
        chunk_insts_3_button_o <= chunk_insts_3_prev_button;
    end
end


always @(posedge clk_i) begin: CLASSIC_FSM_LOC_INSTS_CHUNK_INSTS_3_LOC_INSTS_CHUNK_INSTS_K
    if ((inputs_i[1] == chunk_insts_3_prev_button)) begin
        if ((chunk_insts_3_debounce_cnt != 0)) begin
            chunk_insts_3_debounce_cnt <= (chunk_insts_3_debounce_cnt - 1);
        end
    end
    else begin
        chunk_insts_3_debounce_cnt <= 120000;
    end
    chunk_insts_3_prev_button <= inputs_i[1];
end


always @(posedge clk_i) begin: CLASSIC_FSM_LOC_INSTS_CHUNK_INSTS_4_LOC_INSTS_CHUNK_INSTS_0
    if ((chunk_insts_4_debounce_cnt == 0)) begin
        chunk_insts_4_button_o <= chunk_insts_4_prev_button;
    end
end


always @(posedge clk_i) begin: CLASSIC_FSM_LOC_INSTS_CHUNK_INSTS_4_LOC_INSTS_CHUNK_INSTS_K
    if ((inputs_i[0] == chunk_insts_4_prev_button)) begin
        if ((chunk_insts_4_debounce_cnt != 0)) begin
            chunk_insts_4_debounce_cnt <= (chunk_insts_4_debounce_cnt - 1);
        end
    end
    else begin
        chunk_insts_4_debounce_cnt <= 120000;
    end
    chunk_insts_4_prev_button <= inputs_i[0];
end


always @(fsm_state) begin: CLASSIC_FSM_LOC_INSTS_CHUNK_INSTS_K_C
    case (fsm_state)
        2'b00: begin
            outputs_o = 1;
        end
        2'b01: begin
            outputs_o = 2;
        end
        2'b10: begin
            outputs_o = 4;
        end
        2'b11: begin
            outputs_o = 8;
        end
        default: begin
            outputs_o = 15;
        end
    endcase
end

endmodule
